import createPath from "./paths";

const edges: [string, string][] = [
  ["a0", "a1"],
  ["a1", "a2"],
  ["a2", "a3"],
  ["a3", "a4"],
  ["a4", "a5"],
  ["a5", "a6"],
  ["a6", "a7"],
  ["a7", "a8"],
  ["a8", "a9"],

  ["b0", "b1"],
  ["b1", "a2"],

  ["a3", "b4"],
  ["b4", "b5"],
  ["b5", "a6"],

  ["a7", "b8"],
  ["b8", "b9"],
];

describe("create path", () => {
  it("easy fork", () => {
    expect(
      createPath([
        ["a0", "a1"],
        ["a1", "a2"],
        ["a1", "b2"],
      ])
    ).toEqual([
      ["a0", "a1", "a2"],
      ["a0", "a1", "b2"],
    ]);
  });
  it("rich graph", () => {
    expect(createPath(edges)).toEqual([
      ["a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"],
      ["a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "b8", "b9"],
      ["a0", "a1", "a2", "a3", "b4", "b5", "a6", "a7", "a8", "a9"],
      ["a0", "a1", "a2", "a3", "b4", "b5", "a6", "a7", "b8", "b9"],
      ["b0", "b1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"],
      ["b0", "b1", "a2", "a3", "a4", "a5", "a6", "a7", "b8", "b9"],
      ["b0", "b1", "a2", "a3", "b4", "b5", "a6", "a7", "a8", "a9"],
      ["b0", "b1", "a2", "a3", "b4", "b5", "a6", "a7", "b8", "b9"],
    ]);
  });
});
